#pragma once
#include <ImGUI/Shader_Context.h>

// import software colortranform
#include <helper/color_transform.h>
struct NV12_to_RGB : public I_Render_Task
{
    struct SettingParams : Check_Render_Task_Completeness<SettingParams>
    {
        struct Shader_Params
        {
            // could be set on outside
            Universal_Type_Wrapper<string> texture_path = {"overlay", R"(F:/BMP/9.dib)"};
            Universal_Type_Wrapper<int> mode = {"mode", 0, 0, 3, 0.1};
            Universal_Type_Wrapper<int> dst_Width = {"back_Width", 512, 256, 2048, 256};
            Universal_Type_Wrapper<int> dst_Height = {"back_Height", 512, 256, 2048, 256};
            // generated by texture
            Universal_Type_Wrapper<int> overlay_Width = {"overlay_Width", 512, 256, 2048, 256};
            Universal_Type_Wrapper<int> overlay_Height = {"overlay_Height", 512, 256, 2048, 256};
            auto GetAllAttr() const { return std::tie(texture_path, mode, dst_Width, dst_Height, overlay_Width, overlay_Height); }
        };
        Universal_Group_Wrapper<Shader_Params> shader_params = {"Shader params", {}};
        Universal_Type_Wrapper<bool> will_autogen_frame_wh = {"will autogen frame width and height", false};
        Universal_Type_Wrapper<int> frame_width = {"frame width", 1920, 256, 2048, 256};
        Universal_Type_Wrapper<int> frame_height = {"frame height", 1080, 256, 2048, 256};
        Universal_Type_Wrapper<string> vsSrc = {"vert shader source", R"(../src/test_frame/glsl/HANDSOUT/nv12_t0_rgb/nv12_t0_rgb.vs.glsl)"};
        Universal_Type_Wrapper<string> fsSrc = {"frag shader source", R"(../src/test_frame/glsl/HANDSOUT/nv12_t0_rgb/nv12_t0_rgb.fs.glsl)"};

        auto GetAllAttr() const { return std::tie(shader_params, will_autogen_frame_wh, frame_width, frame_height, vsSrc, fsSrc); }
    };
    NV12_to_RGB(string const &name, string const &vsSrc, string const &fsSrc, CentralController *cc)
        : I_Render_Task(name, vsSrc, fsSrc, cc) {}

    Cache_Group_Wrapper<SettingParams> params = {"NV12_to_RGB", SettingParams{}};
    // texture obj
    TextureObject tex = {-1, 0};

    CachingWrapper<string> vsSrcContent;
    CachingWrapper<string> fsSrcContent;
    bool PrepareExecutingParameters() override
    {
        auto chgParams=!params.SyncCache();
        vsSrcContent.SetSelf(readFile(params->vsSrc.data));
        fsSrcContent.SetSelf(readFile(params->fsSrc.data));
        // params and shader source not changing, just return
        // here checking if program is 0, is to check if program had been initilize
        if (tex.GetTTexture()!=-1&&!chgParams&&vsSrcContent.SyncCache()&&fsSrcContent.SyncCache())
            return true;
        program = Helper::CreateProgram(ShaderObject(GL_VERTEX_SHADER,vsSrcContent ),
                                        ShaderObject(GL_FRAGMENT_SHADER, fsSrcContent));
        auto temp_use = program.temp_use();

        // calc vertex position
        // xucl todo: use operator-> to simplify the longy reference like xxx.data.yyy to xxx->yyy
          float fh = params->frame_height.data, dh = params->shader_params->dst_Height.data;
        float fw = params->frame_width.data, dw = params->shader_params->dst_Width.data;
        auto vx = dw / fw * 2, vy = dh / fh * 2;
        std::tie(vao, vbo, veo) = detailed_simpleV_ABE_O<4>(-1, -1 + vx, 1 - vy, 1);

        Light::BufferLayout layout = {
            Light::BufferElement(Light::ShaderDataType::Float4, "position", false),
            Light::BufferElement(Light::ShaderDataType::Float2, "TextureUV", false)};
        vbo->setLayout(layout);
        vao->addVertexBuffer(vbo);
        vao->setIndexBuffer(veo);
        // xucl error: if all the shaders binding the same GL_TEXTURE1, in the serial calling in cc.Tick()
        // there would be a overwriting behaviour on this GL_TEXTURE1
        // xucl todo: here generate yuv data by hand

        //tex = Helper::CreateTexture(GL_TEXTURE1, params->shader_params->texture_path.data);
        auto rgb_data=Helper::stb_pic_data::create_stb_pic_data(params->shader_params->texture_path.data);
        // nv12 / rgb = 5/12
        auto yuv_data=std::vector<int8_t>(rgb_data->w*rgb_data->h*5/4);
        using T=unsigned char*;
        Rgb2NV12(T(rgb_data->data),3,rgb_data->w,rgb_data->h,T(yuv_data.data()));
        tex = Helper::CreateTextureByData(GL_TEXTURE1,GL_ALPHA,GL_ALPHA,T(yuv_data.data()),rgb_data->w,rgb_data->h);
        program.setInt(params->shader_params->texture_path.GetName(),tex.targetTexture-GL_TEXTURE0);
        SetProgramParam(program,params->shader_params->mode);
        SetProgramParam(program,params->shader_params->dst_Width);
        SetProgramParam(program,params->shader_params->dst_Height);
        SetProgramParam(program,params->shader_params->overlay_Width);
        SetProgramParam(program,params->shader_params->overlay_Height);
        return true;
    }

    void ShowConfig() override
    {
        // constexpr bool s=std::is_integral_v<bool>;
        Draw_element(params, []
                     {
				ImGui::Text("when Shader-params.dst_* and frame width is set up");
				ImGui::Text("the vertex coord will be generated automatically"); });
        if (params->will_autogen_frame_wh.data == true)
        {
            params->frame_height.data = params->shader_params->dst_Height.data;
            params->frame_width.data = params->shader_params->dst_Width.data;
        }
    }
    std::string &GetVsSrcFile()override{ return params->vsSrc.data;}
    std::string &GetFsSrcFile()override{ return params->fsSrc.data;}
private:
    ~NV12_to_RGB(){

    };
};
